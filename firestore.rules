rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/settings/admins) && 
             request.auth.uid in get(/databases/$(database)/documents/settings/admins).data.adminIds;
    }

    // Allow anyone to read public data
    match /tournaments/{tournamentId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Admin settings document
    match /settings/admins {
      allow read: if request.auth != null && 
                  exists(/databases/$(database)/documents/settings/admins) && 
                  request.auth.uid in resource.data.adminIds;
      allow write: if request.auth != null && 
                   exists(/databases/$(database)/documents/settings/admins) && 
                   request.auth.uid in resource.data.adminIds;
    }
    
    // Brackets - allow admins to update any bracket
    match /brackets/{bracketId} {
      // Allow reading any bracket
      allow read: if true;
      
      // Only allow users to create or update their own brackets
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // User profiles
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Messages collection for discussion board
    match /messages/{messageId} {
      // Anyone can read messages
      allow read: if true;
      
      // Only authenticated users can create messages with proper validation
      allow create: if request.auth != null && 
                    request.resource.data.content.size() <= 280 &&
                    request.resource.data.userId == request.auth.uid;
      
      // Users can only delete their own messages
      allow delete: if request.auth != null && 
                    resource.data.userId == request.auth.uid;
                    
      // No updates allowed for messages (they're ephemeral)
      allow update: if false;
    }

    // Track user message counts
    match /userMessageCounts/{userId} {
      // Users can read and write their own message count
      allow read, write: if request.auth != null && 
                         request.auth.uid == userId;
    }
  }
}